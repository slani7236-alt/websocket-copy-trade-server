"""
üöÄ WebSocket Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Copy Trade System
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Master ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
- Broadcast ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Followers ‡πÅ‡∏ö‡∏ö real-time
- Delay < 100ms
"""

import asyncio
import websockets
import json
import time
from datetime import datetime
from collections import defaultdict

class CopyTradeWebSocketServer:
    def __init__(self, host="0.0.0.0", port=8765):
        self.host = host
        self.port = port
        self.followers = set()  # Connected followers
        self.masters = set()    # Connected masters
        self.signal_history = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        self.stats = {
            'total_signals': 0,
            'total_followers': 0,
            'total_masters': 0,
            'start_time': time.time()
        }
    
    async def register_client(self, websocket, client_type):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô client (master/follower)"""
        if client_type == "master":
            self.masters.add(websocket)
            self.stats['total_masters'] = len(self.masters)
            print(f"[SERVER] üëë Master connected: {len(self.masters)} total")
        elif client_type == "follower":
            self.followers.add(websocket)
            self.stats['total_followers'] = len(self.followers)
            print(f"[SERVER] üë• Follower connected: {len(self.followers)} total")
        
        # ‡∏™‡πà‡∏á welcome message
        await websocket.send(json.dumps({
            'type': 'welcome',
            'role': client_type,
            'server_time': time.time(),
            'stats': self.stats
        }))
    
    async def unregister_client(self, websocket):
        """‡∏•‡∏ö client ‡πÄ‡∏°‡∏∑‡πà‡∏≠ disconnect"""
        if websocket in self.masters:
            self.masters.remove(websocket)
            self.stats['total_masters'] = len(self.masters)
            print(f"[SERVER] ‚ùå Master disconnected: {len(self.masters)} remaining")
        if websocket in self.followers:
            self.followers.remove(websocket)
            self.stats['total_followers'] = len(self.followers)
            print(f"[SERVER] ‚ùå Follower disconnected: {len(self.followers)} remaining")
    
    async def broadcast_signal(self, signal_data, sender_ws):
        """‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á followers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata
        signal_data['broadcast_time'] = time.time()
        signal_data['server_id'] = id(self)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        self.signal_history.append(signal_data)
        if len(self.signal_history) > 1000:  # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 1000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            self.signal_history = self.signal_history[-1000:]
        
        self.stats['total_signals'] += 1
        
        message = json.dumps(signal_data)
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á followers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° sender)
        if self.followers:
            print(f"[SERVER] üì° Broadcasting to {len(self.followers)} followers")
            results = await asyncio.gather(
                *[ws.send(message) for ws in self.followers if ws != sender_ws],
                return_exceptions=True
            )
            
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            success_count = sum(1 for r in results if not isinstance(r, Exception))
            print(f"[SERVER] ‚úÖ Delivered: {success_count}/{len(self.followers)}")
        else:
            print(f"[SERVER] ‚ö†Ô∏è No followers connected")
    
    async def handle_client(self, websocket, path=None):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ connection ‡∏à‡∏≤‡∏Å client (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á websockets 12.x ‡πÅ‡∏•‡∏∞ 15.x)"""
        client_type = None
        
        try:
            # ‡∏£‡∏≠ handshake message
            async for message in websocket:
                data = json.loads(message)
                msg_type = data.get('type')
                
                if msg_type == 'register':
                    # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô client
                    client_type = data.get('role', 'follower')
                    await self.register_client(websocket, client_type)
                
                elif msg_type == 'signal' and websocket in self.masters:
                    # Master ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏°‡∏≤
                    print(f"[SERVER] üî• Signal from Master: {data.get('asset')} {data.get('direction')}")
                    await self.broadcast_signal(data, websocket)
                
                elif msg_type == 'ping':
                    # Health check
                    await websocket.send(json.dumps({
                        'type': 'pong',
                        'server_time': time.time()
                    }))
                
                elif msg_type == 'get_history':
                    # ‡∏Ç‡∏≠‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
                    limit = data.get('limit', 10)
                    await websocket.send(json.dumps({
                        'type': 'history',
                        'signals': self.signal_history[-limit:]
                    }))
                
                elif msg_type == 'get_stats':
                    # ‡∏Ç‡∏≠‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                    await websocket.send(json.dumps({
                        'type': 'stats',
                        'data': self.stats
                    }))
        
        except websockets.exceptions.ConnectionClosed:
            print(f"[SERVER] üîå Connection closed")
        except Exception as e:
            print(f"[SERVER] ‚ùå Error: {e}")
        finally:
            await self.unregister_client(websocket)
    
    async def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô WebSocket server"""
        print(f"[SERVER] üöÄ Starting WebSocket server...")
        print(f"[SERVER] üìç Host: {self.host}:{self.port}")
        print(f"[SERVER] ‚è∞ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        async with websockets.serve(
            self.handle_client,
            self.host,
            self.port,
            ping_interval=30,
            ping_timeout=10,
            max_size=10**6  # 1MB max message size
        ):
            print(f"[SERVER] ‚úÖ Server ready!")
            print(f"[SERVER] üîó Clients can connect to: ws://{self.host}:{self.port}")
            await asyncio.Future()  # run forever

def main():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server"""
    import os
    # Railway ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î PORT ‡πÉ‡∏´‡πâ, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ 8765 (local)
    port = int(os.environ.get('PORT', 8765))
    host = "0.0.0.0"
    
    print(f"[SERVER] üåê Starting on port {port} (Railway: {bool(os.environ.get('RAILWAY_ENVIRONMENT'))})")
    server = CopyTradeWebSocketServer(host=host, port=port)
    asyncio.run(server.start())

if __name__ == "__main__":
    main()
