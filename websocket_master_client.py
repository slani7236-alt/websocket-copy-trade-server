"""
üì¶ WebSocket Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Master Bot
- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket Server
- ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö order ‡πÉ‡∏´‡∏°‡πà
- Auto-reconnect
"""

import asyncio
import websockets
import json
import time
import threading
from typing import Dict, Any

class MasterWebSocketClient:
    def __init__(self, server_url="ws://localhost:8765"):
        self.server_url = server_url
        self.websocket = None
        self.connected = False
        self.loop = None
        self.reconnect_delay = 5
        self.max_reconnect_delay = 60
        
    async def connect(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket server"""
        try:
            print(f"[MASTER WS] üîó Connecting to {self.server_url}...")
            self.websocket = await websockets.connect(
                self.server_url,
                ping_interval=30,
                ping_timeout=10
            )
            self.connected = True
            
            # ‡∏™‡πà‡∏á register message
            await self.websocket.send(json.dumps({
                'type': 'register',
                'role': 'master',
                'timestamp': time.time()
            }))
            
            # ‡∏£‡∏≠ welcome message
            response = await self.websocket.recv()
            data = json.loads(response)
            
            if data.get('type') == 'welcome':
                print(f"[MASTER WS] ‚úÖ Connected as Master")
                print(f"[MASTER WS] üìä Server stats: {data.get('stats')}")
                self.reconnect_delay = 5  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï delay
                return True
            
        except Exception as e:
            print(f"[MASTER WS] ‚ùå Connection failed: {e}")
            self.connected = False
            return False
    
    async def send_signal(self, signal_data: Dict[str, Any]):
        """‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á followers"""
        if not self.connected or not self.websocket:
            print(f"[MASTER WS] ‚ö†Ô∏è Not connected, cannot send signal")
            return False
        
        try:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata
            signal_data['type'] = 'signal'
            signal_data['master_timestamp'] = time.time()
            
            # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            start_time = time.time()
            await self.websocket.send(json.dumps(signal_data))
            send_time = (time.time() - start_time) * 1000
            
            print(f"[MASTER WS] üì§ Signal sent ({send_time:.0f}ms)")
            print(f"[MASTER WS] üìä {signal_data.get('asset')} {signal_data.get('direction')} ${signal_data.get('amount')}")
            return True
            
        except Exception as e:
            print(f"[MASTER WS] ‚ùå Send error: {e}")
            self.connected = False
            return False
    
    async def ping_loop(self):
        """‡∏™‡πà‡∏á ping ‡πÄ‡∏û‡∏∑‡πà‡∏≠ keep connection alive"""
        while True:
            try:
                if self.connected and self.websocket:
                    await self.websocket.send(json.dumps({
                        'type': 'ping',
                        'timestamp': time.time()
                    }))
                await asyncio.sleep(30)  # ping ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            except:
                break
    
    async def reconnect_loop(self):
        """Auto-reconnect ‡πÄ‡∏°‡∏∑‡πà‡∏≠ disconnect"""
        while True:
            if not self.connected:
                print(f"[MASTER WS] üîÑ Reconnecting in {self.reconnect_delay}s...")
                await asyncio.sleep(self.reconnect_delay)
                
                success = await self.connect()
                if not success:
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÅ‡∏ö‡∏ö exponential backoff
                    self.reconnect_delay = min(
                        self.reconnect_delay * 2,
                        self.max_reconnect_delay
                    )
            else:
                await asyncio.sleep(5)
    
    async def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô client"""
        # Connect ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        await self.connect()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° background tasks
        await asyncio.gather(
            self.ping_loop(),
            self.reconnect_loop()
        )
    
    def start_background(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô background thread"""
        def run_loop():
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            self.loop.run_until_complete(self.start())
        
        thread = threading.Thread(target=run_loop, daemon=True)
        thread.start()
        print(f"[MASTER WS] üöÄ Background client started")
    
    def send_signal_sync(self, signal_data: Dict[str, Any]):
        """‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö synchronous (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main thread)"""
        if self.loop and self.connected:
            future = asyncio.run_coroutine_threadsafe(
                self.send_signal(signal_data),
                self.loop
            )
            try:
                return future.result(timeout=2)
            except Exception as e:
                print(f"[MASTER WS] ‚ùå Sync send error: {e}")
                return False
        return False
    
    def close(self):
        """‡∏õ‡∏¥‡∏î connection"""
        self.connected = False
        if self.websocket:
            asyncio.run_coroutine_threadsafe(
                self.websocket.close(),
                self.loop
            )
