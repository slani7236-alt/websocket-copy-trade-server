import asyncio
import websockets
import json
import time
import threading
import aiohttp
from typing import Dict, Any

class MasterWebSocketClient:
    def __init__(self, server_url="ws://localhost:8765"):
        self.server_url = server_url
        self.websocket = None
        self.connected = False
        self.loop = None
        self.reconnect_delay = 3  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 3s ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Master (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
        self.max_reconnect_delay = 10  # Max 10s ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Master
    
    @property
    def is_connected(self):
        """Check if truly connected"""
        if not self.connected:
            return False
        if not self.websocket:
            return False
        if self.websocket.closed:
            self.connected = False
            return False
        return True
        
    async def wake_server(self):
        """Wake up Render server ‡∏ñ‡πâ‡∏≤ cold start"""
        try:
            health_url = self.server_url.replace('wss://', 'https://').replace('ws://', 'http://')
            if 'render.com' in health_url:
                health_url = health_url.split(':')[0] + '://' + health_url.split('://')[1].split(':')[0]
            health_url = health_url.rstrip('/') + '/health'
            
            print(f"[MASTER WS] üîî Waking server...")
            async with aiohttp.ClientSession() as session:
                async with session.get(health_url, timeout=aiohttp.ClientTimeout(total=30)) as resp:
                    if resp.status == 200:
                        print(f"[MASTER WS] ‚úÖ Server is awake")
                        return True
        except Exception as e:
            print(f"[MASTER WS] ‚ö†Ô∏è Wake attempt failed: {e}")
        return False
    
    async def connect(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket server"""
        # Wake server ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Render
        if 'render.com' in self.server_url:
            await self.wake_server()
            await asyncio.sleep(2)
        
        try:
            print(f"[MASTER WS] üîó Connecting to {self.server_url}...")
            self.websocket = await websockets.connect(
                self.server_url,
                ping_interval=20,      # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 20s ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î bandwidth ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ server
                ping_timeout=90,       # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 90s ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render cold start
                close_timeout=15,      # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 15s
                open_timeout=90,       # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 90s ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cold start ‡∏ó‡∏µ‡πà‡∏ä‡πâ‡∏≤
                max_size=10**7,
                compression=None       # ‡∏õ‡∏¥‡∏î compression ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
            )
            self.connected = True
            
            # ‡∏™‡πà‡∏á register message
            await self.websocket.send(json.dumps({
                'type': 'register',
                'role': 'master',
                'timestamp': time.time()
            }))
            
            # ‡∏£‡∏≠ welcome message
            response = await self.websocket.recv()
            data = json.loads(response)
            
            if data.get('type') == 'welcome':
                print(f"[MASTER WS] ‚úÖ Connected as Master")
                print(f"[MASTER WS] üìä Server stats: {data.get('stats')}")
                self.reconnect_delay = 5  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï delay
                return True
            
        except Exception as e:
            print(f"[MASTER WS] ‚ùå Connection failed: {e}")
            self.connected = False
            return False
    
    async def send_signal(self, signal_data: Dict[str, Any]):
        """‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á followers with auto-reconnect"""
        # ‡∏ñ‡πâ‡∏≤ disconnected ‡πÉ‡∏´‡πâ reconnect ‡∏Å‡πà‡∏≠‡∏ô (max 2 attempts)
        for attempt in range(2):
            if not self.connected or not self.websocket:
                print(f"[MASTER WS] üîÑ Auto-reconnecting before send (attempt {attempt+1}/2)...")
                await self.connect()
                await asyncio.sleep(1)
        
        if not self.connected or not self.websocket:
            print(f"[MASTER WS] ‚ùå Cannot send signal - still disconnected after reconnect attempts")
            return False
        
        try:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata
            signal_data['type'] = 'signal'
            signal_data['master_timestamp'] = time.time()
            
            # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            start_time = time.time()
            await self.websocket.send(json.dumps(signal_data))
            send_time = (time.time() - start_time) * 1000
            
            print(f"[MASTER WS] üì§ Signal sent ({send_time:.0f}ms)")
            print(f"[MASTER WS] üìä {signal_data.get('asset')} {signal_data.get('direction')} ${signal_data.get('amount')}")
            return True
            
        except Exception as e:
            print(f"[MASTER WS] ‚ùå Send error: {e}")
            self.connected = False
            # ‡∏•‡∏≠‡∏á reconnect ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            print(f"[MASTER WS] üîÑ Retrying send after reconnect...")
            await self.connect()
            if self.connected:
                try:
                    await self.websocket.send(json.dumps(signal_data))
                    print(f"[MASTER WS] ‚úÖ Signal sent successfully after retry")
                    return True
                except:
                    pass
            return False
    
    async def ping_loop(self):
        """‡∏™‡πà‡∏á ping ‡πÄ‡∏û‡∏∑‡πà‡∏≠ keep connection alive ‡πÅ‡∏ö‡∏ö aggressive"""
        consecutive_failures = 0
        last_success_time = time.time()
        
        while True:
            try:
                if self.connected and self.websocket:
                    try:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ websocket ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        if self.websocket.closed:
                            print(f"[MASTER WS] ‚ö†Ô∏è WebSocket closed, marking disconnected")
                            self.connected = False
                            consecutive_failures = 0
                            await asyncio.sleep(2)
                            continue
                        
                        # ‡∏™‡πà‡∏á ping ‡∏î‡πâ‡∏ß‡∏¢ timeout ‡∏™‡∏±‡πâ‡∏ô
                        ping_task = self.websocket.ping()  # ‡πÉ‡∏ä‡πâ built-in ping
                        await asyncio.wait_for(ping_task, timeout=5)
                        
                        # Success
                        consecutive_failures = 0
                        last_success_time = time.time()
                        
                    except asyncio.TimeoutError:
                        consecutive_failures += 1
                        print(f"[MASTER] Ping timeout ({consecutive_failures}/2)")
                        if consecutive_failures >= 2:
                            self.connected = False
                            consecutive_failures = 0
                            
                    except Exception as send_error:
                        consecutive_failures += 1
                        if consecutive_failures >= 2:
                            self.connected = False
                            consecutive_failures = 0
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 60s ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ping ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    if time.time() - last_success_time > 60:
                        print(f"[MASTER] No successful ping for 60s, reconnecting...")
                        self.connected = False
                        consecutive_failures = 0
                        
                await asyncio.sleep(15)  # Ping ‡∏ó‡∏∏‡∏Å 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (aggressive)
                
            except Exception as e:
                print(f"[MASTER] Ping error: {e}")
                self.connected = False
                await asyncio.sleep(3)
    
    async def reconnect_loop(self):
        """Auto-reconnect ‡πÄ‡∏°‡∏∑‡πà‡∏≠ disconnect - aggressive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Master"""
        while True:
            try:
                if not self.connected:
                    # Master ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - reconnect ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                    wait_time = min(self.reconnect_delay, 10)  # Max 10s
                    print(f"[MASTER] Reconnecting in {wait_time:.0f}s...")
                    await asyncio.sleep(wait_time)
                    
                    try:
                        # Close old connection ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                        if self.websocket and not self.websocket.closed:
                            try:
                                await self.websocket.close()
                            except:
                                pass
                        
                        success = await self.connect()
                        if success:
                            print(f"[MASTER] ‚úÖ Reconnected!")
                            self.reconnect_delay = 3  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô 3s ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Master
                        else:
                            # ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10s ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Master
                            self.reconnect_delay = min(self.reconnect_delay * 1.2, 10)
                            
                    except Exception as connect_error:
                        self.reconnect_delay = min(self.reconnect_delay * 1.2, 10)
                else:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö connection health
                    await asyncio.sleep(2)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ websocket ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
                    if self.websocket and self.websocket.closed:
                        print(f"[MASTER] WebSocket closed unexpectedly")
                        self.connected = False
                        
            except Exception as e:
                print(f"[MASTER] Reconnect error: {e}")
                await asyncio.sleep(3)
    
    async def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô client"""
        # Connect ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        await self.connect()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° background tasks
        await asyncio.gather(
            self.ping_loop(),
            self.reconnect_loop()
        )
    
    def start_background(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô background thread"""
        def run_loop():
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            self.loop.run_until_complete(self.start())
        
        thread = threading.Thread(target=run_loop, daemon=True)
        thread.start()
        print(f"[MASTER WS] üöÄ Background client started")
    
    def send_signal_sync(self, signal_data: Dict[str, Any]):
        """‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö synchronous (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main thread)"""
        if self.loop and self.connected:
            future = asyncio.run_coroutine_threadsafe(
                self.send_signal(signal_data),
                self.loop
            )
            try:
                return future.result(timeout=2)
            except Exception as e:
                print(f"[MASTER WS] ‚ùå Sync send error: {e}")
                return False
        return False
    
    def close(self):
        """‡∏õ‡∏¥‡∏î connection"""
        self.connected = False
        if self.websocket:
            asyncio.run_coroutine_threadsafe(
                self.websocket.close(),
                self.loop
            )
